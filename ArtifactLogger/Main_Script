-- loading

repeat wait() until game.IsLoaded
repeat wait() until game.Players.LocalPlayer

-- services

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")

-- locales

local Settings = {["BagHook"] = nil, ["BackpackHook"] = nil, ["RogueCookie"] = nil}
local Artifacts = loadstring(game:HttpGet("https://raw.githubusercontent.com/R00T66/ProjectSnake/main/ArtifactLogger/Artifacts"))()
local Bankers = loadstring(game:HttpGet("https://raw.githubusercontent.com/R00T66/ProjectSnake/main/ArtifactLogger/Bankers"))()

local Client = Players.LocalPlayer
local Thrown = workspace:WaitForChild("Thrown")

-- functions

local GetPhotoByText = function(Text)
   for i, v in pairs(Artifacts) do
      if Text == i then
         return v
      end
   end
   
   return "https://cdn.writermag.com/2019/03/question-marks.jpg"
end

local GetNearestBanker = function(Object)
   local ObjPos = Object.Position
   
   local Distance = 999999999
   local Closest = "UNKNOWN"
   
   for i, v in pairs(Bankers) do
      if (v.Position - ObjPos).magnitude < Distance then
         Distance = (v.Position - ObjPos).magnitude
         Closest = i
      end
   end
   
   return Closest
end

local JoinCheck = function(UserID)
    local JoinRequest;
      
    pcall(function() JoinRequest = syn.request({
          Url = "https://api.roblox.com/Users/" .. tostring(UserID) .. "/OnlineStatus",
          Method = "GET",
          Headers = {
           ["Cookie"] = ".ROBLOSECURITY=" .. Settings["RogueCookie"]
          }
    }) end)
  
    if JoinRequest ~= nil then
       if JoinRequest.GameId ~= nil then
          return true,"yup"
       else
          return false,"[ERROR?](https://www.roblox.com/home)"
       end
    else
       return false,"[INVALID COOKIE](https://www.roblox.com/login"
    end
end

local GetPlayers = function()
   local Player_Log = { }
   local Fix_Player = function(Name, ID)
      return ("[" .. Name .. "](https://www.roblox.com/users/" .. tostring(ID) .. ")")
   end
   
   if Settings["RogueCookie"] ~= nil then
       for i, v in pairs(Players:GetPlayers()) do
          local Check,Msg = JoinCheck(v.UserId)
          if Check == true then
             table.insert(Player_Log, Fix_Player(v.Name, v.UserId))
          end
       end
   else
       for i, v in pairs(Players:GetPlayers()) do
          table.insert(Player_Log, Fix_Player(v.Name, v.UserId))
       end      
   end
   
   if #Player_Log ~= 0 then
      return table.concat(Player_Log, ", ")
   else
      if Settings["RogueCookie"] == nil then
          return "[ERROR](https://www.roblox.com/home)"
      else
          return "[INVALID COOKIE](https://www.roblox.com/login)"
      end
   end
end

local CreateTag = function(Name, Parent)
   local Tag = Instance.new("Folder")
   Tag.Name = Name
   Tag.Parent = Parent
   
   return Tag
end

local CreateEmbed = function(Type, Artifact, Location, Player)
   local contentbody = { }
   local contentphoto = GetPhotoByText(Artifact)
   if Type:lower() == "bag" then
      contentbody = {
       content = nil,
       embeds = {{
         ["title"] = ("[BAG DROP]"),
         ["description"] = ("[PLAYERS]\n\n" .. GetPlayers()),
         ["color"] = 62975,
         ["fields"] = {
          {name = "ARTIFACT", value = Artifact, inline = false},
          {name = "LOCATION", value = Location, inline = false}
         },
         ["thumbnail"] = {
          ["url"] = contentphoto
         }
       }}
      }   
   elseif Type:lower() == "backpack" then
      contentbody = {
       content = "@everyone",
       embeds = {{
         ["title"] = ("[BACKPACK LOG]"),
         ["description"] = ("[PLAYERS]\n\n" .. GetPlayers()),
         ["color"] = 62975,
         ["fields"] = {
          {name = "ARTIFACT", value = Artifact, inline = false},
          {name = "HOLDER", value = tostring(Player.Name), inline = false},
          {name = "FOUND BY", value = tostring(Client.Name), inline = false}
         },
         ["thumbnail"] = {
          ["url"] = contentphoto
         }
       }}
      }
   else
      contentbody = {
       content = "@here an error occured!?"
      }
   end
   
   return HttpService:JSONEncode(contentbody)
end

local SendHook = function(Hook, Data)
   local S = syn.request({Url = Hook, Method = "POST", Headers = {["Content-Type"] = "application/json"}, Body = Data})
   return S
end

local AttemptView = function(Player)
   if Player.Character then
      if Player.Character:FindFirstChild("Head") then
         
         local Camera = workspace.CurrentCamera
         
         Camera.CameraSubject = Player.Character:FindFirstChild("Head")
         Camera.CameraType = Enum.CameraType.Custom
      end
   end
end

local BackpackConnection = function(Player)
   if Player:FindFirstChild("Backpack") then
      local Backpack = Player:FindFirstChild("Backpack")
      local IdentifyAndLog = function(Tool)
          for i, v in pairs(Artifacts) do
             if tostring(Tool.Name) == i and not Tool:FindFirstChild("Logged") then
                local Embed_Backpack = CreateEmbed("backpack", i, nil, Player)
                
                if Settings["BackpackHook"] ~= nil then
                   local Create_Tag = CreateTag("Logged", Tool)
                   local Hook = Settings["BackpackHook"]
                   local Req = SendHook(Hook, Embed_Backpack)
                end
                
                if _G.ActiveSniping == true then
                   AttemptView(Player)
                end
             end
          end          
      end
      Backpack.ChildAdded:Connect(function(Tool)
          IdentifyAndLog(Tool)
      end)
      for i, Tool in pairs(Backpack:GetChildren()) do
          IdentifyAndLog(Tool)
      end
   end
end

local CharacterConnection = function(Player)
   if Player.Character then
      local Character = Player.Character
      local IdentifyAndLog = function(Tool)
          for i, v in pairs(Artifacts) do
             if tostring(Tool.Name) == i and not Tool:FindFirstChild("Logged") then
                
                local Embed_Backpack = CreateEmbed("backpack", i, nil, Player)
 
                if _G.ActiveSniping == true then
                   AttemptView(Player)
                end
                
                if Settings["BackpackHook"] ~= nil then
                   local Create_Tag = CreateTag("Logged", Tool)
                   local Hook = Settings["BackpackHook"]
                   local Req = SendHook(Hook, Embed_Backpack)
                end
             end
          end
      end
      Character.ChildAdded:Connect(function(Tool)
          IdentifyAndLog(Tool)
      end)
      for i, Tool in pairs(Character:GetChildren()) do
          IdentifyAndLog(Tool)
      end
   end
end

local BagConnection = function(Object)
   if Object.Name == "ToolBag" then
      local ItemDropped = nil
      
      pcall(function(...)
          repeat wait() ItemDropped = Object.BillboardGui.Tool.Text until ItemDropped ~= nil
      end) 
      
      for i, v in pairs(Artifacts) do
         if i == ItemDropped then
            local Bag_Embed = CreateEmbed("bag", i, GetNearestBanker(Object), nil)
            
            if Settings["BagHook"] ~= nil then
               local Hook = Settings["BagHook"]
               local Req = SendHook(Hook, Bag_Embed)
            end
         end
      end 
   end
end

local SetupPlayer = function(Player)
   if Player ~= Client and not Player:FindFirstChild("Connected") then
      local Tag = CreateTag("Connected", Player)
      
      repeat wait() until Player.Character or Player == nil
      
      Player.CharacterAdded:Connect(function(Character)
          CharacterConnection(Player)
      end)
      
      CharacterConnection(Player)
      BackpackConnection(Player)
   else
      --
   end
end

-- setup 

if _G.Settings ~= nil then
   if _G.Settings["ArtifactLogger"] ~= nil then
       local ArtifactLogger_Settings = _G.Settings["ArtifactLogger"]
       
       Settings["BagHook"] = ArtifactLogger_Settings["BagHook"]
       Settings["BackpackHook"] = ArtifactLogger_Settings["BackpackHook"]
       Settings["RogueCookie"] = ArtifactLogger_Settings["RogueCookie"]
   end
end

-- finalization

Players.PlayerAdded:Connect(SetupPlayer)
Thrown.ChildAdded:Connect(BagConnection)

for i, Player in pairs(Players:GetPlayers()) do
   SetupPlayer(Player)
end
